diff --git a/FDF1.0.1/image.c b/FDF1.0.1/image.c
index 460e274..fc4ce51 100644
--- a/FDF1.0.1/image.c
+++ b/FDF1.0.1/image.c
@@ -6,8 +6,7 @@
 
 #include "image.h"
 
-#include <xmmintrin.h>
-typedef __v4sf v4sf;
+#include "../intrinsics.h"
 
 /********** Create/Delete **********/
 
diff --git a/FDF1.0.1/opticalflow_aux.c b/FDF1.0.1/opticalflow_aux.c
index 957a946..6ba8f02 100644
--- a/FDF1.0.1/opticalflow_aux.c
+++ b/FDF1.0.1/opticalflow_aux.c
@@ -4,8 +4,7 @@
 #include <string.h>
 #include "opticalflow_aux.h"
 
-#include <xmmintrin.h>
-typedef __v4sf v4sf;
+#include "../intrinsics.h"
 
 #define datanorm 0.1f*0.1f//0.01f // square of the normalization factor
 #define epsilon_color (0.001f*0.001f)//0.000001f
@@ -134,7 +133,7 @@ void compute_smoothness(image_t *dst_horiz, image_t *dst_vert, const image_t *uu
     const v4sf qa = {quarter_alpha,quarter_alpha,quarter_alpha,quarter_alpha};
     const v4sf epsmooth = {epsilon_smooth,epsilon_smooth,epsilon_smooth,epsilon_smooth};
     for(j=0 ; j< height*stride/4 ; j++){
-        *sp = qa / __builtin_ia32_sqrtps( (*uxp)*(*uxp) + (*uyp)*(*uyp) + (*vxp)*(*vxp) + (*vyp)*(*vyp) + epsmooth );
+        *sp = qa / v4sf_sqrt( (*uxp)*(*uxp) + (*uyp)*(*uyp) + (*vxp)*(*vxp) + (*vyp)*(*vyp) + epsmooth );
         sp+=1;uxp+=1; uyp+=1; vxp+=1; vyp+=1;
     }
     image_delete(ux); image_delete(uy); image_delete(vx); image_delete(vy); 
@@ -238,7 +237,7 @@ void compute_data_and_match(image_t *a11, image_t *a12, image_t *a22, image_t *b
             n2 = (*ix2p) * (*ix2p) + (*iy2p) * (*iy2p) + dnorm;
             tmp3 = *iz3p + (*ix3p)*(*dup) + (*iy3p)*(*dvp);
             n3 = (*ix3p) * (*ix3p) + (*iy3p) * (*iy3p) + dnorm;
-            tmp = (*maskp) * hdover3 / __builtin_ia32_sqrtps(tmp*tmp/n1 + tmp2*tmp2/n2 + tmp3*tmp3/n3 + epscolor);
+            tmp = (*maskp) * hdover3 / v4sf_sqrt(tmp*tmp/n1 + tmp2*tmp2/n2 + tmp3*tmp3/n3 + epscolor);
             tmp3 = tmp/n3; tmp2 = tmp/n2; tmp /= n1;
             *a11p += tmp  * (*ix1p) * (*ix1p);
             *a12p += tmp  * (*ix1p) * (*iy1p);
@@ -269,7 +268,7 @@ void compute_data_and_match(image_t *a11, image_t *a12, image_t *a22, image_t *b
         n6 = (*iyy3p) * (*iyy3p) + (*ixy3p) * (*ixy3p) + dnorm;
         tmp5 = *ixz3p + (*ixx3p) * (*dup) + (*ixy3p) * (*dvp);
         tmp6 = *iyz3p + (*ixy3p) * (*dup) + (*iyy3p) * (*dvp);
-        tmp = (*maskp) * hgover3 / __builtin_ia32_sqrtps(tmp*tmp/n1 + tmp2*tmp2/n2 + tmp3*tmp3/n3 + tmp4*tmp4/n4 + tmp5*tmp5/n5 + tmp6*tmp6/n6 + epsgrad);
+        tmp = (*maskp) * hgover3 / v4sf_sqrt(tmp*tmp/n1 + tmp2*tmp2/n2 + tmp3*tmp3/n3 + tmp4*tmp4/n4 + tmp5*tmp5/n5 + tmp6*tmp6/n6 + epsgrad);
         tmp6 = tmp/n6; tmp5 = tmp/n5; tmp4 = tmp/n4; tmp3 = tmp/n3; tmp2 = tmp/n2; tmp /= n1;      
         *a11p += tmp *(*ixx1p)*(*ixx1p) + tmp2*(*ixy1p)*(*ixy1p);
         *a12p += tmp *(*ixx1p)*(*ixy1p) + tmp2*(*ixy1p)*(*iyy1p);
@@ -289,7 +288,7 @@ void compute_data_and_match(image_t *a11, image_t *a12, image_t *a22, image_t *b
         if(half_beta){ // dpsi_match
             tmp  = *uup - (*descflowxp);
             tmp2 = *vvp - (*descflowyp);
-            tmp = hbeta*(*descweightp)/__builtin_ia32_sqrtps(tmp*tmp+tmp2*tmp2+epsdesc);
+            tmp = hbeta*(*descweightp)/v4sf_sqrt(tmp*tmp+tmp2*tmp2+epsdesc);
             *a11p += tmp;
             *a22p += tmp;
             *b1p -= tmp*((*wxp)-(*descflowxp));
@@ -353,10 +352,10 @@ void compute_data(image_t *a11, image_t *a12, image_t *a22, image_t *b1, image_t
             n2 = (*ix2p) * (*ix2p) + (*iy2p) * (*iy2p) + dnorm;
             tmp3 = *iz3p + (*ix3p)*(*dup) + (*iy3p)*(*dvp);
             n3 = (*ix3p) * (*ix3p) + (*iy3p) * (*iy3p) + dnorm;
-            tmp = (*maskp) * hdover3 / __builtin_ia32_sqrtps(tmp*tmp/n1 + tmp2*tmp2/n2 + tmp3*tmp3/n3 + epscolor);
+            tmp = (*maskp) * hdover3 / v4sf_sqrt(tmp*tmp/n1 + tmp2*tmp2/n2 + tmp3*tmp3/n3 + epscolor);
             tmp3 = tmp/n3; tmp2 = tmp/n2; tmp /= n1;
             #else
-            tmp = (*maskp) * hdover3 / __builtin_ia32_sqrtps(3 * tmp*tmp/n1 + epscolor);
+            tmp = (*maskp) * hdover3 / v4sf_sqrt(3 * tmp*tmp/n1 + epscolor);
             tmp /= n1;
             #endif
             *a11p += tmp  * (*ix1p) * (*ix1p);
@@ -392,10 +391,10 @@ void compute_data(image_t *a11, image_t *a12, image_t *a22, image_t *b1, image_t
         n6 = (*iyy3p) * (*iyy3p) + (*ixy3p) * (*ixy3p) + dnorm;
         tmp5 = *ixz3p + (*ixx3p) * (*dup) + (*ixy3p) * (*dvp);
         tmp6 = *iyz3p + (*ixy3p) * (*dup) + (*iyy3p) * (*dvp);
-        tmp = (*maskp) * hgover3 / __builtin_ia32_sqrtps(tmp*tmp/n1 + tmp2*tmp2/n2 + tmp3*tmp3/n3 + tmp4*tmp4/n4 + tmp5*tmp5/n5 + tmp6*tmp6/n6 + epsgrad);
+        tmp = (*maskp) * hgover3 / v4sf_sqrt(tmp*tmp/n1 + tmp2*tmp2/n2 + tmp3*tmp3/n3 + tmp4*tmp4/n4 + tmp5*tmp5/n5 + tmp6*tmp6/n6 + epsgrad);
         tmp6 = tmp/n6; tmp5 = tmp/n5; tmp4 = tmp/n4; tmp3 = tmp/n3; tmp2 = tmp/n2; tmp /= n1;      
         #else
-        tmp = (*maskp) * hgover3 / __builtin_ia32_sqrtps(3* tmp*tmp/n1 + 3* tmp2*tmp2/n2 + epsgrad);
+        tmp = (*maskp) * hgover3 / v4sf_sqrt(3* tmp*tmp/n1 + 3* tmp2*tmp2/n2 + epsgrad);
         tmp2 = tmp/n2; tmp /= n1;      
         #endif
         *a11p += tmp *(*ixx1p)*(*ixx1p) + tmp2*(*ixy1p)*(*ixy1p);
@@ -486,10 +485,10 @@ void compute_data_DE(image_t *a11, image_t *b1, image_t *mask, image_t *wx, imag
             n2 = (*ix2p) * (*ix2p) + (*iy2p) * (*iy2p) + dnorm;
             tmp3 = *iz3p + (*ix3p)*(*dup);
             n3 = (*ix3p) * (*ix3p) + (*iy3p) * (*iy3p) + dnorm;
-            tmp = (*maskp) * hdover3 / __builtin_ia32_sqrtps(tmp*tmp/n1 + tmp2*tmp2/n2 + tmp3*tmp3/n3 + epscolor);
+            tmp = (*maskp) * hdover3 / v4sf_sqrt(tmp*tmp/n1 + tmp2*tmp2/n2 + tmp3*tmp3/n3 + epscolor);
             tmp3 = tmp/n3; tmp2 = tmp/n2; tmp /= n1;
             #else
-            tmp = (*maskp) * hdover3 / __builtin_ia32_sqrtps(3 * tmp*tmp/n1 + epscolor);
+            tmp = (*maskp) * hdover3 / v4sf_sqrt(3 * tmp*tmp/n1 + epscolor);
             tmp /= n1;
             #endif
             *a11p += tmp  * (*ix1p) * (*ix1p);
@@ -515,10 +514,10 @@ void compute_data_DE(image_t *a11, image_t *b1, image_t *mask, image_t *wx, imag
         n6 = (*iyy3p) * (*iyy3p) + (*ixy3p) * (*ixy3p) + dnorm;
         tmp5 = *ixz3p + (*ixx3p) * (*dup);
         tmp6 = *iyz3p + (*ixy3p) * (*dup);
-        tmp = (*maskp) * hgover3 / __builtin_ia32_sqrtps(tmp*tmp/n1 + tmp2*tmp2/n2 + tmp3*tmp3/n3 + tmp4*tmp4/n4 + tmp5*tmp5/n5 + tmp6*tmp6/n6 + epsgrad);
+        tmp = (*maskp) * hgover3 / v4sf_sqrt(tmp*tmp/n1 + tmp2*tmp2/n2 + tmp3*tmp3/n3 + tmp4*tmp4/n4 + tmp5*tmp5/n5 + tmp6*tmp6/n6 + epsgrad);
         tmp6 = tmp/n6; tmp5 = tmp/n5; tmp4 = tmp/n4; tmp3 = tmp/n3; tmp2 = tmp/n2; tmp /= n1;      
         #else
-        tmp = (*maskp) * hgover3 / __builtin_ia32_sqrtps(3* tmp*tmp/n1 + 3* tmp2*tmp2/n2 + epsgrad);
+        tmp = (*maskp) * hgover3 / v4sf_sqrt(3* tmp*tmp/n1 + 3* tmp2*tmp2/n2 + epsgrad);
         tmp2 = tmp/n2; tmp /= n1;      
         #endif
         *a11p += tmp *(*ixx1p)*(*ixx1p) + tmp2*(*ixy1p)*(*ixy1p);
diff --git a/FDF1.0.1/solver.c b/FDF1.0.1/solver.c
index a4402e9..bc0e0cb 100644
--- a/FDF1.0.1/solver.c
+++ b/FDF1.0.1/solver.c
@@ -9,8 +9,7 @@
 #include "image.h"
 #include "solver.h"
 
-#include <xmmintrin.h>
-typedef __v4sf v4sf;
+#include "../intrinsics.h"
 
 //THIS IS A SLOW VERSION BUT READABLE
 //Perform n iterations of the sor_coupled algorithm
diff --git a/oflow.cpp b/oflow.cpp
index 02056cf..24e23d6 100644
--- a/oflow.cpp
+++ b/oflow.cpp
@@ -104,8 +104,8 @@ namespace OFC
   op.tv_solverit = tv_solverit_in;
   op.tv_sor = tv_sor_in;
   op.normoutlier_tmpbsq = (v4sf) {op.normoutlier*op.normoutlier, op.normoutlier*op.normoutlier, op.normoutlier*op.normoutlier, op.normoutlier*op.normoutlier};
-  op.normoutlier_tmp2bsq = __builtin_ia32_mulps(op.normoutlier_tmpbsq, op.twos);
-  op.normoutlier_tmp4bsq = __builtin_ia32_mulps(op.normoutlier_tmpbsq, op.fours);
+  op.normoutlier_tmp2bsq = v4sf_mul(op.normoutlier_tmpbsq, op.twos);
+  op.normoutlier_tmp4bsq = v4sf_mul(op.normoutlier_tmpbsq, op.fours);
 
   
   // Variables for algorithm timings
diff --git a/oflow.h b/oflow.h
index 964c59d..171751b 100644
--- a/oflow.h
+++ b/oflow.h
@@ -7,12 +7,11 @@
 using std::cout;
 using std::endl;
 
+#include "intrinsics.h"
+
 namespace OFC
 {
 
-typedef __v4sf v4sf;
-  
-
 typedef struct 
 {
   int width;                // image width, does not include '2*imgpadding', but includes original padding to ensure integer divisible image width and height
diff --git a/patch.cpp b/patch.cpp
index 4241011..aacc162 100644
--- a/patch.cpp
+++ b/patch.cpp
@@ -18,11 +18,11 @@ using std::cout;
 using std::endl;
 using std::vector;
 
+#include "intrinsics.h"
+
 namespace OFC
 {
   
-  typedef __v4sf v4sf;
-
   PatClass::PatClass(
     const camparam* cpt_in,
     const camparam* cpo_in,
@@ -232,7 +232,7 @@ void PatClass::LossComputeErrorImage(Eigen::Matrix<float, Eigen::Dynamic, 1>* pa
     for (int i=op->novals/4; i--; ++pd, ++pa, ++te, ++pw)
     {
       (*pd) = (*pa)-(*te);  // difference image
-      (*pw) = __builtin_ia32_andnps(op->negzero,  (*pd) );
+      (*pw) = v4sf_andn(op->negzero,  (*pd) );
     }
   }
   else if (op->costfct==1) // L1 cost function
@@ -240,8 +240,8 @@ void PatClass::LossComputeErrorImage(Eigen::Matrix<float, Eigen::Dynamic, 1>* pa
     for (int i=op->novals/4; i--; ++pd, ++pa, ++te, ++pw)
     {
       (*pd) = (*pa)-(*te);   // difference image
-      (*pd) = __builtin_ia32_orps( __builtin_ia32_andps(op->negzero,  (*pd) )  , __builtin_ia32_sqrtps (__builtin_ia32_andnps(op->negzero,  (*pd) )) );  // sign(pdiff) * sqrt(abs(pdiff))
-      (*pw) = __builtin_ia32_andnps(op->negzero,  (*pd) );
+      (*pd) = v4sf_or( v4sf_and(op->negzero,  (*pd) )  , v4sf_sqrt (v4sf_andn(op->negzero,  (*pd) )) );  // sign(pdiff) * sqrt(abs(pdiff))
+      (*pw) = v4sf_andn(op->negzero,  (*pd) );
     }
   }
   else if (op->costfct==2) // Pseudo Huber cost function
@@ -249,14 +249,14 @@ void PatClass::LossComputeErrorImage(Eigen::Matrix<float, Eigen::Dynamic, 1>* pa
     for (int i=op->novals/4; i--; ++pd, ++pa, ++te, ++pw)
     {
       (*pd) = (*pa)-(*te);   // difference image
-      (*pd) = __builtin_ia32_orps(__builtin_ia32_andps(op->negzero,  (*pd) ), 
-                                  __builtin_ia32_sqrtps (
-                                    __builtin_ia32_mulps(                                                                                         // PSEUDO HUBER NORM
-                                          __builtin_ia32_sqrtps (op->ones + __builtin_ia32_divps(__builtin_ia32_mulps((*pd),(*pd)) , op->normoutlier_tmpbsq)) - op->ones, // PSEUDO HUBER NORM 
+      (*pd) = v4sf_or(v4sf_and(op->negzero,  (*pd) ), 
+                                  v4sf_sqrt (
+                                    v4sf_mul(                                                                                         // PSEUDO HUBER NORM
+                                          v4sf_sqrt (op->ones + v4sf_div(v4sf_mul((*pd),(*pd)) , op->normoutlier_tmpbsq)) - op->ones, // PSEUDO HUBER NORM 
                                           op->normoutlier_tmp2bsq)                                                                                                // PSEUDO HUBER NORM
                                      )
                                     ); // sign(pdiff) * sqrt( 2*b^2*( sqrt(1+abs(pdiff)^2/b^2)+1)  )) // <- looks like this without SSE instruction
-      (*pw) = __builtin_ia32_andnps(op->negzero,  (*pd) );                                    
+      (*pw) = v4sf_andn(op->negzero,  (*pd) );                                    
     }
   }
 }
diff --git a/refine_variational.cpp b/refine_variational.cpp
index 8ab62bc..fd2f7cf 100644
--- a/refine_variational.cpp
+++ b/refine_variational.cpp
@@ -300,7 +300,7 @@ void VarRefClass::RefLevelDE(image_t *wx, const color_image_t *im1, const color_
           {
             for( i=0 ; i<height*stride/4 ; i++)
             {
-                (*uup) = __builtin_ia32_minps(   (*wxp) + (*dup)   ,  op->zero);
+                (*uup) = v4sf_min(   (*wxp) + (*dup)   ,  op->zero);
                 uup+=1; wxp+=1; dup+=1;
             }
           }
@@ -308,7 +308,7 @@ void VarRefClass::RefLevelDE(image_t *wx, const color_image_t *im1, const color_
           {
             for( i=0 ; i<height*stride/4 ; i++)
             {
-                (*uup) = __builtin_ia32_maxps(   (*wxp) + (*dup)   ,  op->zero);
+                (*uup) = v4sf_max(   (*wxp) + (*dup)   ,  op->zero);
                 uup+=1; wxp+=1; dup+=1;
             }
           }
diff --git a/refine_variational.h b/refine_variational.h
index b988a40..4f46ed2 100644
--- a/refine_variational.h
+++ b/refine_variational.h
@@ -10,8 +10,6 @@
 namespace OFC
 {
 
-typedef __v4sf v4sf;
-
 typedef struct
 {
   float alpha;             // smoothness weight
